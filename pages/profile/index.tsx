import { useState } from 'react';
import Head from 'next/head';
import { GetServerSideProps, NextPage } from 'next';
import User from '../../models/User';
import { UserProfile } from '../../ts/types/user';
import UserProfileContainer from '../../Components/Elements/UserProfileContainer';
import UserProfileCard from '../../Components/Elements/UserProfileCard';
import TabButtons from '../../Components/Elements/TabButtons';
import TabContent from '../../Components/Elements/TabContent';
import UserFollowerCard from '../../Components/Elements/UserFollowerCard';

import { tabs } from '../../utils/constants';

import { connect } from 'mongoose';
const MONGODB_URI = process.env.MONGODB_URI || '';
const JWT_SECRET = process.env.JWT_SECRET;

import * as jose from 'jose';

const Profile: NextPage<{
  user: UserProfile;
  followers: UserProfile[];
  following: UserProfile[];
}> = ({ user, followers, following }) => {
  const [tabIndex, setTabIndex] = useState(0);

  return (
    <>
      <Head>
        <title>cine.mize - profile</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <section>
        <UserProfileContainer>
          <UserProfileCard user={user} />
          <TabButtons
            followersQty={user.followers.length}
            followingQty={user.following.length}
            setTabIndex={setTabIndex}
            index={tabIndex}
          />
        </UserProfileContainer>

        <div className='pt-3'>
          <TabContent tab='posts' activeTab={tabs[tabIndex]}>
            {Array.from(Array(200).keys()).map((item) => {
              return <p key={item}>{item}</p>;
            })}
          </TabContent>
          <TabContent tab='followers' activeTab={tabs[tabIndex]}>
            {followers.map((user) => {
              return <UserFollowerCard key={user.userName} {...user} />;
            })}
          </TabContent>
          <TabContent tab='following' activeTab={tabs[tabIndex]}>
            {following.map((user) => {
              return <UserFollowerCard key={user.userName} {...user} />;
            })}
          </TabContent>
        </div>
      </section>
    </>
  );
};
export default Profile;

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  await connect(MONGODB_URI).catch((err) => console.log(err));

  const jwt = ctx.req.cookies.CinemizeJWT;

  const response = await jose.jwtVerify(
    jwt!,
    new TextEncoder().encode(JWT_SECRET)
  );
  const _id = await response.payload.userId;
  const user = await User.findById(_id, {
    password: 0,
    createdAt: 0,
    _id: 0,
    email: 0,
    updatedAt: 0,
    __v: 0,
  });
  const userResponse = JSON.parse(JSON.stringify(user));

  // FOLLOWERS DO PERFIL VISITADO
  const followers = await User.aggregate([
    { $match: { userName: { $in: userResponse?.followers } } },
    {
      $project: {
        _id: 0,
        email: 0,
        password: 0,
        followers: 0,
        following: 0,
        _v: 0,
        createdAt: 0,
        updatedAt: 0,
      },
    },
  ]);
  //

  // FOLLOWING DO PERFIL VISITADO
  const following = await User.aggregate([
    { $match: { userName: { $in: userResponse?.following } } },
    {
      $project: {
        _id: 0,
        email: 0,
        password: 0,
        followers: 0,
        following: 0,
        _v: 0,
        createdAt: 0,
        updatedAt: 0,
      },
    },
  ]);

  return {
    props: {
      user: userResponse,
      followers: JSON.parse(JSON.stringify(followers)),
      following: JSON.parse(JSON.stringify(following)),
    },
  };
};
