import { useState } from 'react';
import { tabs } from '../../utils/constants';

import Head from 'next/head';
import { GetServerSideProps, NextPage } from 'next';
import { UserProfile } from '../../ts/types/user';

import UserProfileContainer from '../../components/UserProfileContainer';
import UserProfileCard from '../../components/UserProfileCard';
import TabButtons from '../../components/TabButtons';
import TabContent from '../../components/TabContent';
import UserFollowerCard from '../../components/UserFollowerCard';
import PostCard from '../../components/PostCard';
import NoDataMsg from '../../components/NoDataMsg';
import PostForm from '../../components/PostForm';

import User from '../../models/User';
import { connect } from 'mongoose';
const MONGODB_URI = process.env.MONGODB_URI || '';

import { getUserId, getUserFollow, getAllPosts } from '../../utils/dbFunctions';

import { PostCard as PC } from '../../ts/types/post';
import PostButton from '../../components/PostButton';
import { useSelector } from 'react-redux';
import { RootState } from '../../store/store';

const Profile: NextPage<{ user: UserProfile; followers: UserProfile[]; following: UserProfile[]; posts:PC[]; loggedUserId:string, genre:string[], options:string[] }> = ({ user, followers, following, posts, loggedUserId,options,genre }) => {
  
  const [tabIndex, setTabIndex] = useState(0);

  const { showForm } = useSelector((state:RootState)=> state.showForm)
 
  return (
    <>
      <Head>
        <title>cine.mize - profile</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <section>
        <UserProfileContainer>
          <UserProfileCard user={user} />
          <TabButtons
            followersQty={followers.length}
            followingQty={following.length}
            setTabIndex={setTabIndex}
            index={tabIndex}
            isPostAllowed
          />
        </UserProfileContainer>

          <TabContent tab='posts' activeTab={tabs[tabIndex]}>
          {posts?.filter(post =>post.userId === loggedUserId).length === 0 && <NoDataMsg message='Você ainda não criou posts' />}

            {posts?.filter(post =>post.userId === loggedUserId).map((post) => {
              return <PostCard loggedUserId={loggedUserId} key={post.postId} {...post} />;
            })}
          </TabContent>
          <TabContent tab='followers' activeTab={tabs[tabIndex]}>
          {followers?.length === 0 && <NoDataMsg message='Você ainda não possui seguidores' />}

            {followers?.map((user) => {
              return <UserFollowerCard key={user.userId} {...user} />;
            })}
          </TabContent>
          <TabContent tab='following' activeTab={tabs[tabIndex]}>
          {following?.length === 0 && <NoDataMsg message='Você ainda está seguindo ninguém' />}

            {following?.map((user) => {
              return <UserFollowerCard key={user.userId} {...user} />;
            })}
          </TabContent>

          <PostButton  />
          {showForm &&  <PostForm options={options} genre={genre} />}
      </section>
    </>
  );
};
export default Profile;

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  await connect(MONGODB_URI).catch((err) => console.log(err));

  const jwt = ctx.req.cookies.CinemizeJWT;

  const _id = await getUserId(jwt);
  
  const user = await User.findOne({_id}, { password: 0, createdAt: 0, _id: 0, email: 0, updatedAt: 0 });
  
  const userResponse = await JSON.parse(JSON.stringify(user));

  const posts = await getAllPosts(_id!)

  const { followers, following } = await getUserFollow(userResponse?.userId)

  const options = [
    'netflix',
    'amazon',
    'star+',
    'hbo max',
    'youtube',
    'disney+',
  ];
  const genre = [
    'suspense',
    'terror',
    'horror',
    'ação',
    'comédia',
    'drama',
    'guerra',
  ];

  
  return {
    props: {
      user: userResponse,
      followers: followers,
      following: following,
      posts: posts,
      loggedUserId: userResponse?.userId,
      options:options,
      genre:genre
    },
  };
};
